## This file defines a system with three floating point inputs and 3 integer outputs which are a funtion of those inputs
## There is no done signal

## $(P) is the prefix of our template


#######  The following records represent piezo axis inputs in millivolts #########

record(ao, "$(P):setPitch"){
	field(DESC, "setPitch")
	field(EGU, "mV")
	field(DRVH, "10000")
	field(DRVL, "0")
	field(FLNK, "$(P):filtPitch")
}

record(ao, "$(P):setRoll"){
	field(DESC, "setRoll")
	field(EGU, "mV")
	field(DRVH, "10000")
	field(DRVL, "0")
	field(FLNK, "$(P):filtRoll")
}

record(ao, "$(P):setHeight"){
	field(DESC, "setPitch")
	field(EGU, "mV")
	field(DRVH, "10000")
	field(DRVL, "0")
	field(FLNK, "$(P):filtHeight")
}

######## Filters so that the axes slowly move to where they are going. #####

record(calc, "$(P):filtPitch"){
	field(DESC, "pitch voltage filter")
	field(INPA, "$(P):setPitch")
	field(INPB, "$(P):filtPitch.VAL")		# Takes itslef as input to implement filter
	field(INPC, "0.9")						# Change this to adjust the rate of change
	field(CALC, "B+C*(A-B)")		
	field(SCAN, ".1 second")				# How often the filter updates
	field(PREC, "3")						# The precision of the output
	field(EGU, "V")
	field(FLNK, "$(P):getPitchEnc")
}

record(calc, "$(P):filtRoll"){
	field(DESC, "Roll voltage filter")
	field(INPA, "$(P):setRoll")
	field(INPB, "$(P):filtRoll.VAL")		# Takes itslef as input to implement filter
	field(INPC, "0.9")						# Change this to adjust the rate of change
	field(CALC, "B+C*(A-B)")		
	field(SCAN, ".1 second")				# How often the filter updates
	field(PREC, "3")						# The precision of the output
	field(EGU, "V")
	field(FLNK, "$(P):getRollEnc")
}

record(calc, "$(P):filtHeight"){
	field(DESC, "height voltage filter")
	field(INPA, "$(P):setHeight")
	field(INPB, "$(P):filtHeight.VAL")	# Takes itslef as input to implement filter
	field(INPC, "0.9")						# Change this to adjust the rate of change
	field(CALC, "B+C*(A-B)")		
	field(SCAN, ".1 second")				# How often the filter updates
	field(PREC, "3")						# The precision of the output
	field(EGU, "V")
	field(FLNK, "$(P):getHeightEnc")
}

###### The following records encode the values from the piezo drive voltages



record(calc, "$(P):getPitchEnc"){
	field(DESC, "calc pitch encoder")
	field(INPA, "$(P):filtPitch")
	field(PREC, "0")
	field(EGU, "Counts")
    field(CALC, "(FLOOR(3800000*A/10000))") # Assume encoder has a range of 3.8e6
	field(FLNK, "$(P):getPitch")
}

record(calc, "$(P):getRollEnc"){
	field(DESC, "calc roll encoder")
	field(INPA, "$(P):filtRoll")
	field(PREC, "0")
	field(EGU, "Counts")
    field(CALC, "(FLOOR(3800000*A/10000))") # Assume encoder has a range of 3.8e6
	field(FLNK, "$(P):getRoll")
}

record(calc, "$(P):getHeightEnc"){
	field(DESC, "calc height encoder")
	field(INPA, "$(P):filtHeight")
	field(PREC, "0")
	field(EGU, "Counts")
    field(CALC, "(FLOOR(3800000*A/10000))") # Assume encoder has a range of 3.8e6
	field(FLNK, "$(P):getHeight")
}

####### The following records calculate the pitch, roll and height based on the encoder values

record(calc, "$(P):getPitch"){
	field(DESC, "calc pitch angle")
	field(INPA, "$(P):getPitchEnc")
	field(INPB, "$(P):getHeightEnc")
	field(PREC, "0")
	field(EGU, "uRad")
    field(CALC, "10E6*ATAN((((A-(3260320-3800000))-(B- (3220620 - 3800000)))*5)/64.75E6)") 
}

record(calc, "$(P):getRoll"){
	field(DESC, "calc pitch angle")
	field(INPA, "$(P):getRollEnc")
	field(INPB, "$(P):getHeightEnc")
	field(PREC, "0")
	field(EGU, "uRad")
    field(CALC, "10E6*ATAN((((A-(3263554 - 3800000))-(B- (3220620 - 3800000)))*5)/127.75E6)") 
}

record(calc, "$(P):getHeight"){
	field(DESC, "calc pitch angle")
	field(INPA, "$(P):getHeightEnc")
	field(PREC, "0")
	field(EGU, "um")
    #field(CALC, "(A-(3220620âˆ’3800000))*5") 
	field(CALC, "(A-(3220620 -3800000))*5")
}
